# -*- coding: utf-8 -*-
"""ShowcasingASmallExperiment.submittedtoStanfordUniversitycoding2024.byMeralA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RhUc8ahACRVSPxcuPYeRsTz-jkVDAseH

# **Showcasing A Small Experiment Project, Stanford University, 2024**

The primary objective of this small experiment is to delve into the relationship between the string length, frequency, and period of a simple pendulum. I will determine how a pendulum's frequency (the number of oscillations per unit time) and period (the time taken for one complete oscillation) depend on the string length (L). Using Python and plotting different graphs and animating the motion of the pendulum, I aim to provide a comprehensive visual representation of this relationship.

I used ''import numpy as np'' and ''import matplotlib.pyplot as plt'' and ''import time'' libraries on Colab. Although I wrote some codes for the animation part, too; however, the animated part isn't visible on colab.

# **Some Background on the Subject:**
**What is a pendulum?**

 A simple pendulum, a beautiful straightforward device, consists of an object of mass(m) suspended at the end of a string(L). When the simple pendulum is gently moved away from its equilibrium position and released, it starts oscillating. In other words, a gentle pull on the mass while keeping the string straight initiates its rhythmic swinging, meaning, the mass will travel on a circular arc determined by the length (L) of the string. It swings back and forth to a bit higher at both ends than its middle position.
>
>
**As a side note**, when the mass m is moving, kinetic energy occurs, and due to the circular path curving upwards, gravitational potential energy is created. Although these two types of energy play a vital role in the pendulum; however, in this experiment, I won't examine them closely.
>
**To ensure the utmost accuracy and reliability of the results**, I'll maintain the mass (m) and the acceleration due to the gravity constant throughout this experiment. And, the string's weight is disregarded for simplicity.
>
**Here are values I used**: mass(m): 30 kg, string length (L): 3 m (300 in cm), and g: 9.81 m/s2.
>
I used the ''Period (T)=2π.sqrt(L/g) '' formula for the period, and the ''1/T'' formula for the frequency calculations. The frequency is inversely proportional to the period.

>
**Acknowledgements**: I would like to send my heartfelt thanks to Chris Piech and Mehran Sahami for their awesome lectures, lecture notes, friendly attitudes, and incredible way of teaching the most complex subjects in the easiest way possible. I am deeply grateful for the invaluable resources provided by them. I was excitedly waiting for Chris's Monday morning zoom meetings, other valuable teachers' workshops and lectures were all awesome. I also send my thanks to the section leaders, the admins, the whole team, and everyone on the forum for their invaluable support, assistance, and contributions. I loved every minute of it and I will miss it so much!

>
>
>
**References**:
>
 https://www.pa.uky.edu/sciworks/FME/fme/vibe4.htm

 https://phet.colorado.edu/sims/html/pendulum-lab/latest/pendulum-lab_all.html

 https://www.aps.org/learning-resources/swinging-science

 https://www.cita.utoronto.ca/~mali/files/phy324.pdf

**#1. Examining "How the Frequency Changes with the String Length of the Pendulum":**
In this code, I wrote a program to calculate the frequencies for different string length, and plot the result for me. The string length is 300 cm and it will be decreased by 10cm at each iteration, so there will be 30 data points on the curve in total. I inserted '#00CED1' code for turquoise color. In other graphs, I used different RGB codes and markers.
"""

import numpy as np
import matplotlib.pyplot as plt
import time

#The list of constant values to be used to calculate the frequencies and periods.
string_length_initial = 300  # The pendulum's string is 3m (and it's 300 in cm).
mass = 30  # This is the mass attached to the end of the string of the pendulum.
g = 9.81  # This is the acceleration value of the gravity, and it's in m/s^2 unit, it's kept constant during this experiment.
#Also, keep in mind that 2π≈360°.

def main():
    lengths = [] # first initialized with empty brackets which, in the program, will be populated with the values later.
    frequencies = []

    for i in range(30):  #The string length is 300 cm and it will be decreased by 10cm at each iteration, so there will be 30 data points in total.
        length = string_length_initial - 10 * i
        frequency = calculate_frequency(length / 100) #For unit conversion, divide by 100.
        lengths.append(length)
        frequencies.append(frequency)

    #To plot the graph, define the x and y axes.
    plt.plot(lengths, frequencies, marker='o', color='#00CED1')  # plot the points in the array o which are seen on the curve in '#00CED1' color.
    plt.title("How the Frequency Changes with the String Length of the Pendulum") # Add a title to the graph.
    plt.xlabel("String Length (in cm)") # Give a label to the x-axis
    plt.ylabel("Frequency (in Hz)")  # Give a label to the y-axis
    plt.grid(True) #with the grids.
    plt.show()

def calculate_frequency(length):
    return 1 / (2 * np.pi) * np.sqrt(g / length)  #g is the acceleration value due to gravity,length: string length of the pendulum, the formula: 1/period=frequency


if __name__ == "__main__":
    main()

"""**2#. Examining ''How the Period Changes With the Length of the Pendulum String''**: In the code, I wrote a program to calculate the periods for different string length, and plot the result for me. The string length is 300 cm and it will be decreased by 10cm at each iteration, so there will be 30 data points on the curve in totalI used the period's formula this time. As a side note, the period of the simple pendulum doesn't depend on the object's mass or the angle value, but depends on the **string length** of the pendulum and its **gravitational acceleration.** If the pendulum moves into a medium *with different gravitational acceleration*, of course, then, the period of the pendulum changes. But for now, in this small experiment, the acceleration due to the gravity g is accepted as 9.81 m/s2, constant, in all of the calculations."""

import numpy as np
import matplotlib.pyplot as plt
import time

#The list of values to be used to calculate the frequencies and periods.
string_length_initial = 300  # The pendulum's string is 3m (and it's 300 in cm).
mass = 30  # This is the mass attached to the end of the string of the pendulum, and it's 30 kg.
g = 9.81  # This is the acceleration value of the gravity, and it's in m/s^2 unit, it's kept constant during this experiment.
#Also, keep in mind that 2π≈360°.

def main():
    lengths = [] # first initialized with empty brackets which, in the program, will be populated with the values later.
    periods = []

    for i in range(30):   #The string length is 300 cm and it will be decreased by 10cm at each iteration, so there will be 30 data points in total
        length = string_length_initial - 10 * i
        period = calculate_period(length/100) #For unit conversion, divide by 100.
        lengths.append(length)
        periods.append(period)

    # To plot the graph, define the x and y axes..
    plt.plot(lengths, periods, marker='*', color='#FF5733') #Plot the points in array ''*'' in #FF5733 color in scatter.
    plt.title("How the Period Changes with the String Length of the Pendulum")  # Add a title to the figure
    plt.xlabel("Length (cm)") # Give a label to the x-axis
    plt.ylabel("Period (s)")  # Give a label to the y-axis
    plt.grid(True)  #With grids.
    plt.show()


def calculate_period(length):
  if length == 0:
    return 0
  else:
    return (2 * np.pi) * np.sqrt(length / g)    #Period=2pi*sqrt(L/g)



if __name__ == "__main__":
    main()

"""**3#.** Examining and plotting **"How the Period and Frequency Change with the String Length"** in one graph."""

import numpy as np
import matplotlib.pyplot as plt
import time

#The list of values to be used to calculate the frequencies and periods.
string_length_initial = 300  # The pendulum's string is 3m (and it's 300 in cm).
mass = 30  # This is the mass attached to the end of the string of the pendulum, and it's 30 kg.
g = 9.81  # This is the acceleration value of the gravity, and it's in m/s^2 unit, it's kept constant during this experiment.
#Also, keep in mind that 2π≈360°.

def main():
    lengths = []  # first initialized with empty brackets which, in the program, will be populated with the values later.
    frequencies = []
    periods = []

    #The string length is 300 cm and it will be decreased by 10cm at each iteration, so there will be 30 data points in total
    for i in range(30):
      length = string_length_initial - 10 * i
      frequency = calculate_frequency(length / 100) #For unit conversion, divide by 100
      period = calculate_period(length/100)
      lengths.append(length)
      frequencies.append(frequency)
      periods.append(period)

    # There will be 2 sets of x and y values; for the frequency and period.

    # Define the x and y axes for the frequency.
    fig, ax1 = plt.subplots()
    ax1.plot(lengths, frequencies, marker='o', color='#00CED1') # Plot the points in array o in '#00CED1' color.
    ax1.set_xlabel('Length (cm)')
    ax1.set_ylabel('Frequency (Hz)', color='#00CED1')
    ax1.tick_params('y', color='#00CED1')

    # Define the x and y axes for the period.
    ax2 = ax1.twinx()
    ax2.plot(lengths, periods, marker='*', color='#FF5733')
    ax2.set_ylabel('Period (s)', color='#FF5733')
    ax2.tick_params('y', color='#FF5733')

    #Give a title to the graph.
    plt.title("How the Period and Frequency Change with the String Length")
    plt.grid(True)
    plt.show()

def calculate_frequency(length):
    if length == 0:
        return 0
    else:
        return 1 / (2 * np.pi) * np.sqrt(g / length)

def calculate_period(length):
    if length == 0:
        return 0
    else:
        return 2 * np.pi * np.sqrt(length / g)





if __name__ == "__main__":
    main()

"""*********** ***See you next time! ******"""

!python --version

!pip install pandas
!pip install matplotlib

